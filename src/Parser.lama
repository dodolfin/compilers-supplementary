-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);

fun binop_expr_repr(op) {
  [s (op), fun (l, op, r) {Binop (op, l, r)}]
}

var exp = memo $ eta expr ({
        [Left, {binop_expr_repr("!!")}],
        [Left, {binop_expr_repr("&&")}],
        [Left, map (binop_expr_repr, {"==", "!=", "<=", "<", ">=", ">"})],
        [Left, map (binop_expr_repr, {"+", "-"})],
        [Left, map (binop_expr_repr, {"*", "/", "%"})]}, primary);

var stmt = memo $ eta syntax (
  kRead x=inbr[s ("("), lident, s (")")] {Read (x)} |
  kWrite e=inbr[s ("("), exp, s (")")] {Write (e)} |
  x=lident s[":="] e=exp {Assn (x, e)} |
  kSkip {Skip}
);

var stmts = memo $ eta syntax (stmt | s1=stmt s[";"] s2=stmts {Seq (s1, s2)});
   

-- Public top-level parser
<<<<<<< HEAD
public parse = stmt;
=======
public parse = stmts;

>>>>>>> c9a8039... Complete Task 3
