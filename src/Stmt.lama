-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of  
    Assn (s, e) -> (
    var exprValue = evalExpr (s, e);
    [s <- [s, exprValue], w]
  )
  | Seq (s1, s2) -> (
    var newConf = eval (c, s1);
    eval (newConf, s2)
  )
  | Skip -> c
  | Read (s) -> (
    var readVal, newWorld;
    case readWorld (w) of [readVal, newWorld] -> [s <- [s, readVal], newWorld] esac
  )
  | Write (e) -> (
    var exprValue = evalExpr (s, e);
    [s, writeWorld (exprValue, w)]
  )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
